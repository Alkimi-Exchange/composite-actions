name: Terraform CI for AWS

on:
  workflow_call:
    inputs:
      terraform-version:
        description: "Terraform version to use"
        required: false
        default: "1.6.0"
        type: string
      working-directory:
        description: "Terraform working directory"
        required: false
        default: "./terraform"
        type: string
      apply-changes:
        description: "Whether to apply changes on the main branch"
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      SLACK_WEBHOOK_URL:
        required: false

jobs:
  terraform_fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Run Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ inputs.working-directory }}

  terraform_validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Initialize Terraform
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Validate Terraform
        run: terraform validate
        working-directory: ${{ inputs.working-directory }}

  terraform_plan:
    name: Terraform Plan
    needs: [terraform_fmt, terraform_validate]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Init
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ inputs.working-directory }}/tfplan

  terraform_apply:
    name: Terraform Apply
    needs: terraform_plan
    if: inputs.apply-changes == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - name: Terraform Init
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: ${{ inputs.working-directory }}

      - name: Terraform Apply
        working-directory: ${{ inputs.working-directory }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve tfplan

  notify_failure:
    name: Notify on Failure
    needs: [terraform_fmt, terraform_validate, terraform_plan, terraform_apply]
    if: failure()
    uses: Alkimi-Exchange/composite-actions/.github/workflows/notify-failure.yml@main
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
